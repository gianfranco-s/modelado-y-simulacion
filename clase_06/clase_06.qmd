---
title: "Modelado Y Simulación - Clase 6"
author: "Gianfranco Salomone"
toc: true
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-fold: true
    html-math-method: katex
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
    
jupyter: python3
---

## Sistemas de tiempo discreto

Sea
$$ \dot{y}(t) + 2 y(t) = u(t) $$
$$ y(0) = 10 $$



En lugar de hallar la solución analítica de la ecuación diferencial, podemos considerar cómo hacer un cálculo de cada punto consecutivo de la solución, partiendo de la condición inicial. Para ello, podemos utilizar la definición de derivada:
$$ \dot{y}(t) = \frac{y(t+\Delta t) - y(t)}{\Delta t} $$

Reemplazando en la ecuación diferencial:

$$ \frac{y(t+\Delta t) - y(t)}{\Delta t} + 2 y(t) = u(t) $$
$$ y(t+\Delta t) - y(t) + 2\Delta t \space y(t) = \Delta t \space u(t) $$
$$ y(t+\Delta t) = \left[ 1-2\Delta t \right] y(t) + \Delta t \space u(t) $$

Suponiendo $u(t)=1$ y $\Delta t = 0.1$, podemos calcular el valor de $y(t+\Delta t)$ para $t=0$:
$$ y(0.1) = 0.8 \space y(0) + 0.1 = 8.1 $$

¿Qué pasa ahora si calculamos para $t'=t+\Delta t$ (un $\Delta t$ después del cálculo anterior)?
$$ y(t'+\Delta t) = \left[ 1-2\Delta t \right] y(t') + \Delta t \space u(t') $$

$$ y(t+\Delta t+\Delta t) = \left[ 1-2\Delta t \right] y(t+\Delta t) + \Delta t \space u(t+\Delta t) $$

Evaluando nuevamente para $t=0$:
$$ y(0.2) = 0.8 \space y(0.1) + 0.1 = 0.8 \cdot 8.1 + 0.1 = 6.58 $$


Y una vez más:
$$ y(t+\Delta t+\Delta t+\Delta t) = \left[ 1-2\Delta t \right] y(t+\Delta t+\Delta t) + \Delta t \space u(t+\Delta t+\Delta t) $$

Como siempre vamos a considerar $t=0$:
$$ y(3\Delta t) = \left[ 1-2\Delta t \right] y(2\Delta t) + \Delta t \space u(2\Delta t) $$

Observamos que los instantes posteriores dependen de instantes anteriores. El único instante del que tenemos información es $y(t=0)=10$; el resto de la información se irá obteniendo a partir de los incrementos $\Delta t$.


| Paso ($k$) | $t=k\Delta t$ | $y_k$  | Cálculo                            |
|:---------:|:-------------:|:------:|:----------------------------------:|
| $1$       | $0.1$         | $8.100$   | $y_1 = 0.8\cdot y_0 + 0.1 \cdot 1$ |
| $2$       | $0.2$         | $6.580$   | $y_2 = 0.8\cdot y_1 + 0.1 \cdot 1$ |
| $3$       | $0.3$         | $5.364$   | $y_3 = 0.8\cdot y_2 + 0.1 \cdot 1$ |
| $4$       | $0.4$         | $4.391$   | $y_4 = 0.8\cdot y_3 + 0.1 \cdot 1$ |
| $5$       | $0.5$         | $3.613$   | $y_5 = 0.8\cdot y_4 + 0.1 \cdot 1$ |
| $6$       | $0.6$         | $2.990$   | $y_6 = 0.8\cdot y_5 + 0.1 \cdot 1$ |
| $7$       | $0.7$         | $2.492$   | $y_7 = 0.8\cdot y_6 + 0.1 \cdot 1$ |
| $8$       | $0.8$         | $2.094$   | $y_8 = 0.8\cdot y_7 + 0.1 \cdot 1$ |
| $9$       | $0.9$         | $1.775$   | $y_9 = 0.8\cdot y_8 + 0.1 \cdot 1$ |
| $10$      | $1.0$         | $1.520$   | $y_10 = 0.8\cdot y_9 + 0.1 \cdot 1$ |
: Evolución instante a instante

```{python}
#| echo: false
import matplotlib.pyplot as plt
import numpy as np

def discrete_solution(y0: float) -> tuple[list, float, list]:
  dt = 0.1               # time step
  coeff = 1 - 2 * dt     # (1 - 2Δt)
  N = 10                 # number of steps
  u = 1                  # unit-step input

  y = [y0]
  for k in range(N):
    y_k = coeff * y[k] + 0.1 * u
    y.append(y_k)

  t = [k * dt for k in range(len(y))]

  return t, dt, y


def continuous_solution(y_0: float, t_end: float) -> tuple[np.array, float, np.array]:
  samples = 500
  t = np.linspace(0, t_end, samples)
  y = y0 * np.exp(-2*t) + 0.5 * (1 - np.exp(-2*t))

  dt = t[1] - t[0]
  return t, dt, y


y0 = 10
t, dt, y = discrete_solution(y0)
t_cont, _, y_cont = continuous_solution(y0, t[-1])

fig, ax = plt.subplots(1, 1, figsize=(8,4))

ax.bar(t, y, align='center', label='Tiempo discreto', width=dt*0.95, alpha=0.6)
ax.plot(t_cont, y_cont, linestyle='--', label='Tiempo continuo')

ax.set_ylabel('$y$')
ax.set_xlabel('$t$')

for spine in ['top','right']:
    ax.spines[spine].set_visible(False)
ax.set_xticks([])    # remove x-ticks
ax.set_yticks([])    # remove y-ticks

ax.set_title('Respuesta temporal aproximada')
ax.legend()


plt.tight_layout()
plt.show()
```